#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("d3-backend:server");
const https = require("https");
const http = require("http");
const fs = require("fs");
const mongoose = require("mongoose");
const socketActions = require("../logic/signalServer/socketActions");

mongoose.Promise = global.Promise;

/**
 * Create HTTP server.
 */

const options = {
    key: fs.readFileSync(__dirname + "/certificate/digit3.key"),
    cert: fs.readFileSync(__dirname + "/certificate/digit3_me.crt"),
    ca: fs.readFileSync(__dirname + "/certificate/digit3_me.ca-bundle")
};

const isProdEnv = process.env.NODE_ENV === "production";

// console.log(options.key)
// console.log(options.cert)
const server = isProdEnv ? https.createServer(options, app) : http.createServer(app);

if (isProdEnv) {
    //connect to local mongo db
    mongoose.connect("mongodb://localhost:27017/d3_dev");
    mongoose.connection.once("open", () => {
        console.log("db connected");
    });
}


/**
 * Event listener for HTTP server "listening" event.
 */
const onListening = () => {
    const addr = server.address();
    const bind = typeof addr === "string"
        ? "pipe " + addr
        : "port " + addr.port;
    debug("Listening on " + bind);
};

/**
 * Normalize a port into a number, string, or false.
 */
const normalizePort = (val) => {
    const normalPort = parseInt(val, 10);

    if (isNaN(normalPort)) {
        // named pipe
        return val;
    }

    if (normalPort >= 0) {
        // port number
        return normalPort;
    }

    return false;
};

/**
 * Event listener for HTTP server "error" event.
 */
const onError = (error) => {
    if (error.syscall !== "listen") {
        throw error;
    }

    const bind = typeof port === "string"
        ? "Pipe " + port
        : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
};

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "1337");

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

const io = require("socket.io")(server);
io.on("connection", (socket) => {
    socketActions.socketActions(io, socket);
});


